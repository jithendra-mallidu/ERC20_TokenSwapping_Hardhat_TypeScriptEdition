/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  AtomicSwapERC20,
  AtomicSwapERC20Interface,
} from "../../../contracts/ERC20_TokenSwappingContract.sol/AtomicSwapERC20";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "swapId",
        type: "uint256",
      },
    ],
    name: "Close",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "_swapID",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_timelock",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "_erc20ContractAddressDT",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "_erc20ContractAddressWDT",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_erc20TokenAmountDT",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_erc20TokenAmountWDT",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "_whoInitiatedTrade",
        type: "address",
      },
    ],
    name: "Open",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_swapId",
        type: "uint256",
      },
    ],
    name: "check",
    outputs: [
      {
        internalType: "address",
        name: "erc20ContractAddressDT",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "erc20TokenAmountDT",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "erc20ContractAddressWDT",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "erc20TokenAmountWDT",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "timeLock",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "whoInitiatedTrade",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_swapId",
        type: "uint256",
      },
    ],
    name: "close",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_swapId",
        type: "uint256",
      },
    ],
    name: "expire",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_swapId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_erc20ContractAddressDT",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_erc20ValueDT",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_erc20ContractAddressWDT",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_erc20ValueWDT",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_timeLock",
        type: "uint256",
      },
    ],
    name: "open",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "swapStates",
    outputs: [
      {
        internalType: "enum AtomicSwapERC20.States",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "swaps",
    outputs: [
      {
        internalType: "uint256",
        name: "swapId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "startTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "timeLock",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "erc20ContractAddressDT",
        type: "address",
      },
      {
        internalType: "address",
        name: "erc20ContractAddressWDT",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "erc20TokenAmountDT",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "erc20TokenAmountWDT",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "whoInitiatedTrade",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061144d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063055fabf4146100675780630aebeb4e146100835780635f72f4501461009f578063bf81bf43146100d4578063f09c5829146100f0578063fe8b3baa14610127575b600080fd5b610081600480360381019061007c9190610f47565b610157565b005b61009d60048036038101906100989190610eed565b6104b1565b005b6100b960048036038101906100b49190610eed565b610989565b6040516100cb969594939291906110d0565b60405180910390f35b6100ee60048036038101906100e99190610eed565b610b1c565b005b61010a60048036038101906101059190610eed565b610da4565b60405161011e989796959493929190611216565b60405180910390f35b610141600480360381019061013c9190610eed565b610e4c565b60405161014e9190611131565b60405180910390f35b6000859050848173ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b8152600401610198929190611047565b60206040518083038186803b1580156101b057600080fd5b505afa1580156101c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e89190610f1a565b10156101f357600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330886040518463ffffffff1660e01b815260040161023093929190611070565b602060405180830381600087803b15801561024a57600080fd5b505af115801561025e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102829190610ec0565b61028b57600080fd5b60006040518061010001604052808981526020014281526020018481526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018781526020018581526020013373ffffffffffffffffffffffffffffffffffffffff168152509050806000808a815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a0820151816005015560c0820151816006015560e08201518160070160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050506000600160008a815260200190815260200160002060006101000a81548160ff0219169083600281111561045f5761045e611312565b5b02179055507f6585f302baa66637b36c127a1a548986f058fb796cfeec8e35be8d6ad96a5fee888489888a893360405161049f97969594939291906111a7565b60405180910390a15050505050505050565b80600060028111156104c6576104c5611312565b5b6001600083815260200190815260200160002060009054906101000a900460ff1660028111156104f9576104f8611312565b5b14610539576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105309061116c565b60405180910390fd5b6000806000848152602001908152602001600020604051806101000160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160058201548152602001600682015481526020016007820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050600180600085815260200190815260200160002060006101000a81548160ff021916908360028111156106c5576106c4611312565b5b02179055506000816060015190506000826080015190508073ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b8152600401610717929190611047565b60206040518083038186803b15801561072f57600080fd5b505afa158015610743573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107679190610f1a565b8360c00151111561077757600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166323b872dd33308660c001516040518463ffffffff1660e01b81526004016107b893929190611070565b602060405180830381600087803b1580156107d257600080fd5b505af11580156107e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080a9190610ec0565b61081357600080fd5b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb338560a001516040518363ffffffff1660e01b81526004016108529291906110a7565b602060405180830381600087803b15801561086c57600080fd5b505af1158015610880573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a49190610ec0565b6108ad57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8460e001518560c001516040518363ffffffff1660e01b81526004016108f09291906110a7565b602060405180830381600087803b15801561090a57600080fd5b505af115801561091e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109429190610ec0565b61094b57600080fd5b7fbf67515a38ee520223d32c1266d52101c30d936ed1f3e436c8caeb0a43cb06bf8560405161097a919061118c565b60405180910390a15050505050565b6000806000806000806000806000898152602001908152602001600020604051806101000160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160058201548152602001600682015481526020016007820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905080606001518160a0015182608001518360c0015184604001518560e001519650965096509650965096505091939550919395565b8060006002811115610b3157610b30611312565b5b6001600083815260200190815260200160002060009054906101000a900460ff166002811115610b6457610b63611312565b5b14610ba4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9b9061116c565b60405180910390fd5b8160008082815260200190815260200160002060070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3f9061114c565b60405180910390fd5b60026001600085815260200190815260200160002060006101000a81548160ff02191690836002811115610c7f57610c7e611312565b5b0217905550600080600085815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60008087815260200190815260200160002060070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600080888152602001908152602001600020600501546040518363ffffffff1660e01b8152600401610d439291906110a7565b602060405180830381600087803b158015610d5d57600080fd5b505af1158015610d71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d959190610ec0565b610d9e57600080fd5b50505050565b60006020528060005260406000206000915090508060000154908060010154908060020154908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060050154908060060154908060070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905088565b60016020528060005260406000206000915054906101000a900460ff1681565b600081359050610e7b816113d2565b92915050565b600081519050610e90816113e9565b92915050565b600081359050610ea581611400565b92915050565b600081519050610eba81611400565b92915050565b600060208284031215610ed657610ed5611341565b5b6000610ee484828501610e81565b91505092915050565b600060208284031215610f0357610f02611341565b5b6000610f1184828501610e96565b91505092915050565b600060208284031215610f3057610f2f611341565b5b6000610f3e84828501610eab565b91505092915050565b60008060008060008060c08789031215610f6457610f63611341565b5b6000610f7289828a01610e96565b9650506020610f8389828a01610e6c565b9550506040610f9489828a01610e96565b9450506060610fa589828a01610e6c565b9350506080610fb689828a01610e96565b92505060a0610fc789828a01610e96565b9150509295509295509295565b610fdd816112a5565b82525050565b610fec81611300565b82525050565b6000610fff602b83611294565b915061100a82611346565b604082019050919050565b6000611022601683611294565b915061102d82611395565b602082019050919050565b611041816112f6565b82525050565b600060408201905061105c6000830185610fd4565b6110696020830184610fd4565b9392505050565b60006060820190506110856000830186610fd4565b6110926020830185610fd4565b61109f6040830184611038565b949350505050565b60006040820190506110bc6000830185610fd4565b6110c96020830184611038565b9392505050565b600060c0820190506110e56000830189610fd4565b6110f26020830188611038565b6110ff6040830187610fd4565b61110c6060830186611038565b6111196080830185611038565b61112660a0830184610fd4565b979650505050505050565b60006020820190506111466000830184610fe3565b92915050565b6000602082019050818103600083015261116581610ff2565b9050919050565b6000602082019050818103600083015261118581611015565b9050919050565b60006020820190506111a16000830184611038565b92915050565b600060e0820190506111bc600083018a611038565b6111c96020830189611038565b6111d66040830188610fd4565b6111e36060830187610fd4565b6111f06080830186611038565b6111fd60a0830185611038565b61120a60c0830184610fd4565b98975050505050505050565b60006101008201905061122c600083018b611038565b611239602083018a611038565b6112466040830189611038565b6112536060830188610fd4565b6112606080830187610fd4565b61126d60a0830186611038565b61127a60c0830185611038565b61128760e0830184610fd4565b9998505050505050505050565b600082825260208201905092915050565b60006112b0826112d6565b9050919050565b60008115159050919050565b60008190506112d1826113be565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061130b826112c3565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600080fd5b7f596f7520617265206e6f7420706572736f6e2077686f20696e6974696174656460008201527f2074686520747261646521000000000000000000000000000000000000000000602082015250565b7f497473206e6f74204f50454e20666f7220737761702100000000000000000000600082015250565b600381106113cf576113ce611312565b5b50565b6113db816112a5565b81146113e657600080fd5b50565b6113f2816112b7565b81146113fd57600080fd5b50565b611409816112f6565b811461141457600080fd5b5056fea2646970667358221220744243655601d54dde57a8db67898cc7faae494c88bc2bb38c175093c9a539dd64736f6c63430008070033";

type AtomicSwapERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AtomicSwapERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AtomicSwapERC20__factory extends ContractFactory {
  constructor(...args: AtomicSwapERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AtomicSwapERC20> {
    return super.deploy(overrides || {}) as Promise<AtomicSwapERC20>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): AtomicSwapERC20 {
    return super.attach(address) as AtomicSwapERC20;
  }
  override connect(signer: Signer): AtomicSwapERC20__factory {
    return super.connect(signer) as AtomicSwapERC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AtomicSwapERC20Interface {
    return new utils.Interface(_abi) as AtomicSwapERC20Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AtomicSwapERC20 {
    return new Contract(address, _abi, signerOrProvider) as AtomicSwapERC20;
  }
}
